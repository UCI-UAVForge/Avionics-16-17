###Specification

####Introduction
	The data management team is responsible for sending and receiving data 
from and to other modules. Currently there is one module known as Autopilot 
which calculates the Location of the flight, altitude of the flight, atmospheric 
pressure of the flight, etc. These are just few examples of what an 
Autopilot can calculate that needs to be sent to other modules. There is 
also a power management unit that can send data to the DataManger. The data 
management team has implemented the publish and subscribe pattern that can 
send data to the other modules and receive data from the Autopilot. We 
choose the publish and subscribe pattern because of the abstraction of the 
function makes it easier to add more devices like the Autopilot to send data
to the DataManger. This also holds true for the the modules that want to 
receive the data. Modules that want to receive data are Radio comms that 
communicate with Ground Station using network packets. Modules like Radio 
Comms can receive data from the Datamanger by subscribing to the keys to 
which they are are interested in. When the data is received from the 
Autopilot or the Power Management  module, the data will be distributed to 
all its subscriber by calling the function pointers and passing the data to 
the function pointers. Overall, the publish and subscribe pattern has the 
benefits of sending data only to the necessary modules that require that 
data. It also makes it easier to add more modules that can send and receive
to the DataManager.

####How it works
	The DataManager contains a source file and a header file.  The 
DataManager declares two functions called Publish and Subscribe in the 
header file. It also declares the function pointer 
‘typedef void(*DataCallback)(void*, size_t);’ which shows the format of 
the function pointer. 

	The Subscribe function takes in a reference to a key and function 
pointer. We choose these parameters to be a reference and a pointer due to 
performance reasons. If they are references and pointers then it does not 
have to copy all  data of the parameters again into the function activation 
record  instead it would just point to the data which makes accessing the 
data faster. The parameters key and function pointer are stored in map 
container. We are using the map container because it stores a value into 
specific key. Because it only stores one value, we have made the value into 
a vector container that can store multiple values. The map container itself 
operates at O(log n) time which means finding and adding just the value to
a key or adding both a key and a value takes O(logn n) time. The vector 
container is also quick which means that accessing an element takes a 
constant time of O(1) and inserting elements takes O(n) time. The subscribe 
function when receiving a key and a value will store the value into the key
`subscribers[key].push_back(callback);`. If the key does not exist, then 
the map container will automatically create a key and store the value. 
Overall, the Subscribe function will put all the function pointer in an 
array of function pointers to a specific value. 

	The Publish function takes in the key, pointer to the data and the 
size of the data. The key and the data are pointers and references due to 
performance reasons. The code  'std::vector<DataCallback>& value = subscribers[key];'
copies the value of the key into a new vector and also create a new empty
vector container if it already does not exist. The vector type is function 
pointers. Using the iterators of the vector containers, the Publish function
loops through all function pointers. The code '(*it)(data, len);' 
dereferences the function pointer and passes in the data and the size of 
the data into the function pointer. This allows the subscribers to receive data
when the data is published. 
